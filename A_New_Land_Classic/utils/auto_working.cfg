#textdomain wesnoth-A_New_Land_Classic

# utils/auto_working.cfg
# Each side turn brings some automatic actions. Researchers study at
# universities and might complete their research. Workers farm or mine
# and might earn gold.

#define COMPLETE_COUNT VAR COUNT_VAR
    # Checks if research is complete. If ${VAR}.progress reached
    # ${VAR}.target, then takes progress, increases target for next
    # completion. Sets ${COUNT_VAR} to number of completions.
    {VARIABLE ({COUNT_VAR}) 0}
    [while]
        [variable]
            name={VAR}.progress
            greater_than_equal_to=${VAR}.target
        [/variable]
        [do]
            {VARIABLE_OP ({VAR}.progress) sub (${VAR}.target)}
            {VARIABLE_OP ({VAR}.target) add 1}
            {VARIABLE_OP ({COUNT_VAR}) add 1}
        [/do]
    [/while]
#enddef

#define AUTOMATIC_STUDYING_FARMING_AND_MINING
    # These actions run inside a side turn event from
    # ANL_INIT:SIDE_TURN.

    # Create container for temporary variables.
    [set_variables]
        name=t
        [literal]
        [/literal]
    [/set_variables]

    # ----------------------------------------------
    # Automatic Studying

    [store_unit]
        [filter]
            type=$anl_side[0].researcher
            side=$side_number
            canrecruit=no
            [filter_location]
                terrain=*^Ve*
            [/filter_location]
        [/filter]
        variable=t.researchers
    [/store_unit]

    # Given current target, we increase which variable?
    {VARIABLE r anl_side[$side_number]}
    [switch]
        variable=$r|.research.current_target
        [case]
            value=agriculture
            {VARIABLE t.progress_variable $r|.farming.progress}
        [/case]
        [case]
            value=mining
            {VARIABLE t.progress_variable $r|.mining.progress}
        [/case]
        [case]
            value=warfare
            {VARIABLE t.progress_variable $r|.warfare.progress}
        [/case]
        [else]
            {ERROR "unknown target: $$r|.research.current_target"}
        [/else]
    [/switch]

    {VARIABLE t.sound no}
    {FOREACH t.researchers i}
        # base number derived from the unit's level
        {VARIABLE t.amount $t.researchers[$i].level}
        # philosophy bonus -- disabled because nothing sets this bonus
        #{VARIABLE_OP amount add $anl_side[$side_number].philosophy.bonus}

        # increase progress
        {VARIABLE_OP $t.progress_variable add $t.amount}
        {VARIABLE t.sound yes}
        {SCROLL_TO $t.researchers[$i].x $t.researchers[$i].y}

        [floating_text]
            x,y=$t.researchers[$i].x,$t.researchers[$i].y
            text="<span color='#ffffff'>$t.amount</span>" # wmllint: ignore
        [/floating_text]
    {NEXT i}
    {IF_VAR t.sound equals yes (
        [then]
            {PLAY_SOUND magic-holy-miss-3.ogg}
            {DELAY 200}
        [/then]
    )}

    # If progress is greater than target, then complete research.
    # Because allies can share knowledge about different targets,
    # we must check all 3 targets (agriculture, mining, warfare).

    # Determine name of leader.
    [store_unit]
        [filter]
            canrecruit=yes
            side=$side_number
        [/filter]
        variable=t.leader
    [/store_unit]
    {IF_VAR t.leader.length greater_than 0 (
        [then]
            {VARIABLE t.name $t.leader.name}
        [/then]
        [else]
            {VARIABLE t.name (_ "Dead Leader")}
        [/else]
    )}

    # Complete agriculture?
    {COMPLETE_COUNT $r|.farming t.count}
    {IF_VAR t.count greater_than 0 (
        [then]
            {VARIABLE_OP $r|.farming.gold add $t.count}
            {VARIABLE t.gold $$r|.farming.gold}
            [message]
                speaker=narrator
                image=wesnoth-icon.png
                caption= _ "Study Complete"
                message= _ "$t.name|'s farms now produce $t.gold gold."
                side_for=$anl_side[$side_number].allies
            [/message]
        [/then]
    )}

    # Complete mining?
    {COMPLETE_COUNT $r|.mining t.count}
    {IF_VAR t.count greater_than 0 (
        [then]
            {VARIABLE_OP $r|.mining.gold add $t.count}
            {VARIABLE t.gold $$r|.mining.gold}
            [message]
                speaker=narrator
                image=items/gold-coins-small.png
                caption= _ "Study Complete"
                message= _ "$t.name|'s mines now produce $t.gold gold."
                side_for=$anl_side[$side_number].allies
            [/message]
        [/then]
    )}

    # Complete warfare?
    {COMPLETE_COUNT $r|.warfare t.count}
    {VARIABLE_OP $r|.warfare.troop_available add $t.count}

    # May this player continue to research warfare?
    {CALL_FUNCTION (anl filter recruits) (
        variable=t.pick
        option=warfare
    )}
    [if]
        [variable]
            name=$r|.warfare.troop_available
            less_than=$t.pick.array.length
        [/variable]
        [then]
            # There are fewer available picks than total picks, so this
            # player can continue to research warfare.
            {VARIABLE $r|.warfare.allow yes}
        [/then]
        [else]
            # This player knows everything about warfare. Disallow
            # warfare and silently switch to agriculture.
            {VARIABLE $r|.warfare.allow no}
            {IF_VAR $r|.research.current_target equals warfare (
                [then]
                    {VARIABLE $r|.research.current_target agriculture}
                [/then]
            )}

            # Cancel any extra progress. The researchers halted their
            # study after they learned everything.
            {VARIABLE $r|.warfare.progress 0}

            # If player has too many available picks, then remove the
            # extra picks, and cancel the increase to target.
            {VARIABLE t.extra $$r|.warfare.troop_available}
            {VARIABLE_OP t.extra sub $t.pick.array.length}
            {VARIABLE_OP $r|.warfare.troop_available sub $t.extra}
            {VARIABLE_OP $r|.warfare.target sub $t.extra}
        [/else]
    [/if]

    # Tell player to right-click to choose new recruit.
    [if]
        [variable]
            name=$r|.warfare.troop_available
            greater_than=0
        [/variable]
        [have_unit]
            canrecruit=yes
            side=$side_number
        [/have_unit]
        [then]
            # Prepare $t.caption and $t.text for a message.

            # Check if player completed research this turn.
            {IF_VAR t.count greater_than 0 (
                [then]
                    # Announce the completion.
                    {VARIABLE t.caption ( _ "Study Complete")}
                    [set_variable]
                        name=t.text
                        value= _ "$t.name|, we have finished researching warfare."
                    [/set_variable]
                [/then]
                [else]
                    # Player forgot to choose unit. Give reminder.
                    {VARIABLE t.caption ( _ "Reminder")}
                    [set_variable]
                        name=t.text
                        value= _ "You have not yet chosen a unit after researching warfare."
                    [/set_variable]
                [/else]
            )}
            [set_variable]
                name=t.text
                value="$t.text " + _ "Right-click on a mage in a university to select a unit to recruit."
            [/set_variable]
            {VARIABLE t.times $$r|.warfare.troop_available}
            {IF_VAR t.times greater_than 1 (
                [then]
                    [set_variable]
                        name=t.text
                        value="$t.text " + _ "(You can do this $t.times times.)"
                    [/set_variable]
                [/then]
            )}
            [message]
                speaker=narrator
                image=wesnoth-icon.png
                caption=$t.caption
                message=$t.text
                side_for=$anl_side[$side_number].allies
            [/message]
        [/then]
    [/if]

    # ----------------------------------------------
    # Automatic Farming

    [store_unit]
        [filter]
            type=$anl_side[0].worker
            side=$side_number
            [and]
                type=Peasant,Ruffian
                [filter_location]
                    terrain=*^Gvs
                [/filter_location]
                [or]
                    type=Goblin Spearman,Walking Corpse
                    [filter_location]
                        terrain=*^Emf
                    [/filter_location]
                [/or]
            [/and]
        [/filter]
        variable=t.harvesters
    [/store_unit]

    [store_unit]
        [filter]
            type=$anl_side[0].worker
            side="$side_number"
            [filter_location]
                terrain=Re,Re^Efm,Re^Es
            [/filter_location]
        [/filter]
        variable=t.planters
    [/store_unit]

    {VARIABLE t.amount $anl_side[$side_number].farming.gold}
    {VARIABLE t.sound no}
    {FOREACH t.harvesters i}
        {VARIABLE r t.harvesters[$i]}

        # auto-harvest
        {ADD_GOLD_SIDE $side_number $t.amount}
        {SET_TERRAIN $$r|.x $$r|.y Re}
        {REMOVE_IMAGE $$r|.x $$r|.y}
        {VARIABLE t.sound yes}
        {SCROLL_TO $$r|.x $$r|.y}

        [floating_text]
            x,y=$$r|.x,$$r|.y
            text="<span color='#cccc33'>$t.amount</span>" # wmllint: ignore
        [/floating_text]
    {NEXT i}
    {IF_VAR t.sound equals yes (
        [then]
            {PLAY_SOUND gold.ogg}
            {DELAY 200}
        [/then]
    )}

    {VARIABLE t.sound no}
    {FOREACH t.planters i}
        {VARIABLE r t.planters[$i]}

        # auto-plant
        [switch]
            variable=$r|.type
            [case]
                value=Peasant,Ruffian
                {SET_TERRAIN $$r|.x $$r|.y Re^Gvs}
                {PLACE_IMAGE items/flower4.png $$r|.x $$r|.y}
            [/case]
            [case]
                value=Goblin Spearman,Walking Corpse
                {SET_TERRAIN $$r|.x $$r|.y Re^Emf}
            [/case]
            [else]
                {ERROR "unknown farmer: $$r|.type"}
            [/else]
        [/switch]
        {VARIABLE t.sound yes}
    {NEXT i}
    {IF_VAR t.sound equals yes (
        [then]
            {PLAY_SOUND entangle.wav}
            {DELAY 200}
        [/then]
    )}

    # ----------------------------------------------
    # Automatic Mining

    [store_unit]
        [filter]
            type=$anl_side[0].worker
            side=$side_number
            [filter_location]
                terrain=H*^Vhh*,M*^Vhh*
            [/filter_location]
        [/filter]
        variable=t.miners
    [/store_unit]

    {VARIABLE t.amount $anl_side[$side_number].mining.gold}
    {VARIABLE t.sound no}
    {FOREACH t.miners i}
        # auto-mine gold
        {ADD_GOLD_SIDE $side_number $t.amount}
        {SCROLL_TO $t.miners[$i].x $t.miners[$i].y}
        {VARIABLE t.sound yes}

        [floating_text]
            x,y=$t.miners[$i].x,$t.miners[$i].y
            text="<span color='#cccc33'>$t.amount</span>" # wmllint: ignore
        [/floating_text]
    {NEXT i}
    {IF_VAR t.sound equals yes (
        [then]
            {PLAY_SOUND gold.ogg}
            {DELAY 200}
        [/then]
    )}

    # Delete temporary variables.
    {CLEAR_VARIABLE r,t}
#enddef
