#textdomain wesnoth-A_New_Land_Classic

# utils/leader_options.cfg
# Leaders can use "Diplomacy" at a university. There are diplomatic
# options to donate gold to allied leaders, to share knowledge with
# allied leaders, and to negotiate for new recruits.

# This file merges code from mainline:
#   multiplayer/scenarios/ANL_utils/ANL_leader_options.cfg

#define ANL_INIT:LEADER_OPTIONS
    [set_menu_item]
        id=anl diplomacy
        description=_ "Diplomacy"
        [show_if]
            [have_unit]
                side=$side_number
                x,y=$x1,$y1
                canrecruit=yes
                [not]
                    [filter_wml]
                        [status]
                            worked_this_turn=yes
                        [/status]
                    [/filter_wml]
                [/not]
            [/have_unit]
        [/show_if]
        [filter_location]
            terrain=*^Ve*
        [/filter_location]
        [command]
            # Create container for temporary variables.
            [set_variables]
                name=t
                [literal]
                    again=yes   # Enter loop to show main options.
                    nothing=no  # Player has not yet picked "Nothing".

                    # Create some [message] tags that are missing some
                    # of their [option]s.

                    [message]
                        caption= _ "Diplomatic Options"
                        speaker=unit
                        message= _ "What shall I do?"

                        [option]
                            message= _ "Nothing"
                            [command]
                                {VARIABLE t.nothing yes}
                            [/command]
                        [/option]
                    [/message]

                    [donate]
                        text= _ "Donate Funds"
                        note= _ "Give 20 gold to a player"
                        [message]
                            caption=_ "Diplomatic Options"
                            speaker=unit
                            image=items/gold-coins-small.png
                            message= _ "Who will you donate funds to?"

                            [option]
                                message= _ "Back"
                                [command]
                                    # Loop to show main options again.
                                    {VARIABLE t.again yes}
                                [/command]
                            [/option]
                        [/message]
                    [/donate]

                    [share]
                        text= _ "Share Knowledge"
                        note= _ "Help an ally with their research"
                        [message]
                            caption=_ "Diplomatic Options"
                            speaker=unit
                            image=items/book4.png
                            message= _ "Who will you share knowledge with?"

                            [option]
                                message= _ "Back"
                                [command]
                                    # Loop to show main options again.
                                    {VARIABLE t.again yes}
                                [/command]
                            [/option]
                        [/message]
                    [/share]
                [/literal]
            [/set_variables]

            # Find all allied leaders. We can only give gold to or share
            # knowledge with these leaders (and not with empty sides).
            [store_unit]
                [filter]
                    canrecruit=yes
                    [filter_side]
                        [allied_with]
                            side=$side_number
                        [/allied_with]
                        [not]
                            side=$side_number
                        [/not]
                    [/filter_side]
                [/filter]
                variable=t.allies
            [/store_unit]

            # Prepare options to donate gold and to share knowledge, but
            # only if this player has any allies.
            {IF_VAR t.allies.length greater_than 0 (
                [then]
                    {ANL_INIT:LEADER_OPTIONS:ALLIES}
                [/then]
            )}

            # Prepare options to negotiate for new recruits.
            # Loop for $t.number from 1 to 3.
            {VARIABLE t.number 1}
            [while]
                {VARIABLE_CONDITIONAL t.number less_than_equal_to 3}
                [do]
                    {ANL_INIT:LEADER_OPTIONS:NEGOTIATION}
                    {VARIABLE_OP t.number add 1}
                [/do]
            [/while]

            # Display message and act on options.
            [while]
                {VARIABLE_CONDITIONAL t.again boolean_equals yes}
                [do]
                    {VARIABLE t.again no}
                    [insert_tag]
                        name=message
                        variable=t.message
                    [/insert_tag]
                [/do]
            [/while]

            # Unless the player chose "Nothing", set leader to 0 moves.
            {IF_VAR t.nothing boolean_equals no (
                [then]
                    {VARIABLE unit.status.worked_this_turn yes}
                    {VARIABLE unit.moves 0}
                    [unstore_unit]
                        variable=unit
                    [/unstore_unit]
                [/then]
            )}

            # Delete SPLOT. Delete temporary variables.
            {CLEAR_VARIABLE s,si,sj,t}
        [/command]
    [/set_menu_item]
#enddef

#define ANL_INIT:LEADER_OPTIONS:ALLIES
    # This is part of ANL_INIT:LEADER_OPTIONS, but only runs if this
    # player has any allies. It prepares options to donate gold or to
    # share knowledge.

    # Can this player donate 20 gold?
    [store_gold]
        side=$side_number
        variable=t.purse
    [/store_gold]
    [if]
        {VARIABLE_CONDITIONAL t.purse greater_than_equal_to 20}
        [then]
            # Create options to donate to each ally.
            {FOREACH t.allies i}

                # Beware that $t.name can contain '$' signs. Must not
                # parse those '$' signs as substitutions. Use a splot
                # to protect $t.name in two-substitution zones.

                {VARIABLE t.name $t.allies[$i].name}
                {VARIABLE t.side $t.allies[$i].side}
                {SPLOT s si (_ "$t.name, side $t.side")}
                {SPLOT s sj (_ "I hereby donate 20 gold to the coffers of $t.name|.")}

                [store_gold]
                    side=$t.side
                    variable=t.from
                [/store_gold]
                {VARIABLE t.to $t.from}
                {VARIABLE_OP t.to add 20}
                [set_variable]
                    name=t.progress
                    value= _ "Gold: $t.from â†’ $t.to"
                [/set_variable]

                [set_variables]
                    name=t.donate.message.option
                    mode=append

                    # Two-substitution zone!
                    [value]
                        # wmllint: display on
                        message="$|s[$si].splot
$t.progress"
                        # wmllint: display off
                        [command]
                            # First, transfer the gold.
                            # Then, show the message.
                            {ADD_GOLD_SIDE ($side_number) -20}
                            {ADD_GOLD_SIDE ($t.side) 20}
                            [message]
                                speaker=unit
                                message="$|s[$sj].splot

<i>$t.progress</i>"
                                side_for=$anl_side[$side_number].allies
                            [/message]
                        [/command]
                    [/value]
                [/set_variables]
            {NEXT i}

            # Enable the option to donate 20 gold.
            [set_variables]
                name=t.message.option
                mode=append
                [literal]
                    # wmllint: display on
                    message={MENU_IMG_TXT items/gold-coins-small.png ("<span color='green'>$t.donate.text</span>
$t.donate.note")}
                    # wmllint: display off
                    [command]
                        [insert_tag]
                            name=message
                            variable=t.donate.message
                        [/insert_tag]
                    [/command]
                [/literal]
            [/set_variables]
        [/then]
        [else]
            # Disable the option to donate 20 gold.
            [set_variables]
                name=t.message.option
                mode=append
                [literal]
                    # wmllint: display on
                    message={MENU_IMG_TXT items/gold-coins-small.png ("<span color='red'>$t.donate.text</span>
<span color='red'>$t.donate.note</span>")}
                    # wmllint: display off
                    [command]
                        {VARIABLE t.again yes}
                    [/command]
                [/literal]
            [/set_variables]
        [/else]
    [/if]

    # Create options to share knowledge with each ally.
    {FOREACH t.allies i}
        # Beware that $t.name can contain '$' signs. The splot protects
        # $t.name in two-substitution zones.
        {VARIABLE t.name $t.allies[$i].name}
        {VARIABLE t.side $t.allies[$i].side}
        {SPLOT_MORE s si (
            name_side=_ "$t.name, side $t.side" # wmllint: ignore

            # Park strings for each target (farming, mining, warfare).
            [target]
                caption=_ "Share knowledge of agriculture"
                message=_ "<b>$t.name</b>, since our wisdom exceeds yours, I have instructed my scholars to further your understanding of agriculture."
                tv=anl_side[$side_number].farming.target
                pw=anl_side[$t.side].farming.progress
                tw=anl_side[$t.side].farming.target
            [/target]
            [target]
                caption=_ "Share knowledge of mining"
                message=_ "<b>$t.name</b>, since the wisdom of my people exceeds yours, I have instructed my scholars to aid you in your efforts to learn the science of mining."
                tv=anl_side[$side_number].mining.target
                pw=anl_side[$t.side].mining.progress
                tw=anl_side[$t.side].mining.target
            [/target]
            [target]
                caption=_ "Share knowledge of warfare"
                message=_ "You know worryingly little about the arts of war, <b>$t.name</b>. I feel an obligation to instruct you in this vital matter."
                tv=anl_side[$side_number].warfare.target
                pw=anl_side[$t.side].warfare.progress
                tw=anl_side[$t.side].warfare.target
            [/target]
        )}

        # Iterate targets.
        {FOREACH s[$si].target j}
            [if]
                # tv > tw, this player has more knowledge than ally
                [variable]
                    name=$s[$si].target[$j].tv
                    greater_than=$$s[$si].target[$j].tw
                [/variable]
                # pw < tw, ally needs progress
                [variable]
                    name=$s[$si].target[$j].pw
                    less_than=$$s[$si].target[$j].tw
                [/variable]
                # if sharing warfare: ally can study warfare
                [and]
                    [not]
                        [variable]
                            name=s[$si].target[$j].tv
                            contains=.warfare.
                        [/variable]
                    [/not]
                    [or]
                        [variable]
                            name=anl_side[$t.side].warfare.allow
                            boolean_equals=yes
                        [/variable]
                    [/or]
                [/and]
                [then]
                    # Add to t.share.message.option
                    {ANL_INIT:LEADER_OPTIONS:SHARE}
                [/then]
            [/if]
        {NEXT j}
    {NEXT i}

    # If t.share.message.option contains any option other than "Back",
    # then enable the outer option to share knowledge.
    [if]
        [variable]
            name=t.share.message.option.length
            greater_than=1
        [/variable]
        [then]
            # Enable the option.
            [set_variables]
                name=t.message.option
                mode=append
                [literal]
                    # wmllint: display on
                    message={MENU_IMG_TXT items/book4.png ("<span color='green'>$t.share.text</span>
$t.share.note")}
                    # wmllint: display off
                    [command]
                        [insert_tag]
                            name=message
                            variable=t.share.message
                        [/insert_tag]
                    [/command]
                [/literal]
            [/set_variables]
        [/then]
        [else]
            # Disable the option.
            [set_variables]
                name=t.message.option
                mode=append
                [literal]
                    # wmllint: display on
                    message={MENU_IMG_TXT items/book4.png ("<span color='red'>$t.share.text</span>
<span color='red'>$t.share.note</span>")}
                    # wmllint: display off
                    [command]
                        {VARIABLE t.again yes}
                    [/command]
                [/literal]
            [/set_variables]
        [/else]
    [/if]
#enddef

#define ANL_INIT:LEADER_OPTIONS:SHARE
    # This is part of ANL_INIT:LEADER_OPTIONS:ALLIES, and prepares a
    # single menu option to share knowledge.

    {VARIABLE t.from $$s[$si].target[$j].pw}
    {VARIABLE t.target $$s[$si].target[$j].tw}
    {VARIABLE t.to $t.from}
    {VARIABLE_OP t.to add 1}
    [set_variable]
        name=t.progress
        value= _ "Progress: $t.from/$t.target â†’ $t.to/$t.target"
    [/set_variable]

    [set_variables]
        name=t.share.message.option
        mode=append

        # Two-substitution zone!
        [value]
            # wmllint: display on, wmllint: markcheck off
            message="<span color='green'>$|s[$si].name_side</span>
$|s[$si].target[$j].caption
$t.progress"
            # wmllint: display off, wmllint: markcheck on
            [command]
                {VARIABLE_OP $|s[$si].target[$j].pw add 1}
                [message]
                    speaker=unit
                    message="$|s[$si].target[$j].message

<i>$t.progress</i>"
                    side_for=$anl_side[$side_number].allies
                [/message]
            [/command]
        [/value]
    [/set_variables]
#enddef

#define ANL_INIT:LEADER_OPTIONS:NEGOTIATION
    # This is part of ANL_INIT:LEADER_OPTIONS, and runs once for each
    # $t.number. It prepares option to negotiate for new recruits.

    {CALL_FUNCTION (anl filter recruits) (
        variable=t.pick_$t.number
        option=leader_option_$t.number
    )}
    {CALL_FUNCTION (anl join names) (
        ary=t.pick_$t.number|.array
        str=t.list_$t.number
    )}

    # Only show this option, if this player can still negotiate for more
    # new recruits. Stop showing it when this player has all recruits.
    [if]
        [variable]
            name=t.pick_$t.number|.array.length
            greater_than=0
        [/variable]
        [then]
            {VARIABLE t.list $t.list_$t.number}
            [set_variable]
                name=t.available_units
                value="<span color='yellow' size='smaller'>" + _ "Available units: $t.list" + "</span>"
            [/set_variable]

            [set_variable]
                name=t.progress_var
                value=anl_side[$side_number].leader_option_$t.number|.progress
            [/set_variable]
            [set_variable]
                name=t.target_var
                value=anl_side[$side_number].leader_option_$t.number|.target
            [/set_variable]
            [set_variable]
                name=t.negotiation_progress
                value= _ "Negotiation Progress: $$t.progress_var|/$$t.target_var"
            [/set_variable]

            {SPLOT_MORE s si (
                image=$t.pick_$t.number|.summary.image
                # wmllint: markcheck off
                text="<span color='green'>$t.pick_$t.number|.summary.text</span>
$t.pick_$t.number|.summary.note
$t.available_units
$t.negotiation_progress"
                # wmllint: markcheck on
            )}

            # If CALL_FUNCTION appears inside a two-substitution zone,
            # then Wesnoth 1.10 gives warnings, like:
            #   warning engine: variable_info: retrieving member of
            #   non-existent container, second_unit.x
            #
            # We put CALL_FUNCTION inside [set_variables][literal] to
            # prevent such problem.

            # Create [option] for negotiation.
            [set_variables]
                name=t.option

                # Two-substitution zone!
                [value]
                    message={MENU_IMG_TXT ($|s[$si].image) ($|s[$si].text)}
                    [command]
                        # Restore some variables to their values from
                        # during 1st substitution.
                        {VARIABLE t.number $t.number}
                        {VARIABLE t.progress_var $t.progress_var}
                        {VARIABLE t.target_var $t.target_var}
                        [command]
                            # This inner command will contain code from
                            # the next [set_variables][literal].
                        [/command]
                    [/command]
                [/value]
            [/set_variables]

            # Fill inner command.
            [set_variables]
                name=t.option.command.command
                [literal]
                    # Add 1 to progress.
                    {VARIABLE_OP $t.progress_var add 1}

                    # If negotiations are complete, then pick a new
                    # recruit.
                    [if]
                        [variable]
                            name=$t.progress_var
                            greater_than_equal_to=$$t.target_var
                        [/variable]
                        [then]
                            {CALL_FUNCTION (anl pick new recruit) (
                                variable=t.pick_$t.number
                                speaker=narrator
                            )}
                            {VARIABLE $t.progress_var 0}
                        [/then]
                    [/if]
                [/literal]
            [/set_variables]

            # Append our new [option] to our [message][option]s.
            [set_variables]
                name=t.message.option
                mode=append
                to_variable=t.option
            [/set_variables]
        [/then]
    [/if]
#enddef
